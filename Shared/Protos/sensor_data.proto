syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "Protos/common.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Shared.Proto";

service SensorDataGrpc {
  // Commands (Create, Update, Delete, etc)
  rpc CreateReading (CreateReadingRequest) returns (google.protobuf.Empty);
  rpc UpdateReading (UpdateReadingRequest) returns (google.protobuf.Empty);

  rpc DeleteReading (DeleteReadingRequest) returns (google.protobuf.Empty);
  rpc DeleteManyReadings (DeleteManyReadingsRequest) returns (google.protobuf.Empty);

  rpc SaveReadingsFromCsv (stream SaveReadingsFromCsvChunk) returns (google.protobuf.Empty);

  // Queries (Read)
  rpc GetFirstRecentFromSensor (GetFirstRecentFromSensorRequest) returns (ReadingDto);

  rpc GetAllFromSensor (GetAllFromSensorRequest) returns (GetManyFromSensorResponse);

  rpc GetLastFromSensor (GetLastFromSensorRequest) returns (GetManyFromSensorResponse);

  rpc GetRangeFromSensor (GetRangeFromSensorRequest) returns (GetManyFromSensorResponse);

  rpc GetDailyMetricsByRange (GetMetricsByRangeRequest) returns (GetMetricsByRangeResponse);
  rpc GetHourlyMetricsByRange (GetMetricsByRangeRequest) returns (GetMetricsByRangeResponse);

  rpc GetRangeFromSensorAsFile (GetRangeFromSensorAsFileRequest) returns (stream GetRangeFromSensorFileChunk);
}


message ReadingDto {
  google.protobuf.Timestamp Time = 1;
  int32 SensorId = 2;
  double Value = 3;
}

message ReadingNoSensorDto {
  google.protobuf.Timestamp Time = 1;
  double Value = 2;
}

enum StatFunction2D {
  AVERAGE_X = 0;
  AVERAGE_Y = 1;
  CORRELATION = 2;
  COVARIANCE = 3;
  INTERCEPT = 4;
  SLOPE = 5;
}

message Stat2DBucketRowDto {
  google.protobuf.Timestamp TimeBucket = 1;
  repeated double Values = 2;
}

message Stat2DBucketResponse {
  repeated int32 XSensorIds = 1;
  repeated int32 YSensorIds = 2;
  int32 XSensorTypeId = 3;
  int32 YSensorTypeId = 4;
  repeated StatFunction2D StatFunctions = 5;
  repeated Stat2DBucketRowDto Data = 6;
}

message DeviceAndSensorName {
  int32 DeviceId = 1;
  string SensorName = 2;
}

message CreateReadingRequest {
  google.protobuf.Timestamp Time = 1;
  double Value = 2;
  oneof Source {
    DeviceAndSensorName DeviceAndName = 3;
    int32 SensorId = 4;
  }
  bool AllowOverwrite = 5;
}

message UpdateReadingRequest {
  google.protobuf.Timestamp Time = 1;
  double Value = 3;
  int32 SensorId = 4;
}

message DeleteReadingRequest {
  google.protobuf.Timestamp Time = 1;
  int32 SensorId = 2;
}

message DeleteManyReadingsRequest {
  int32 SensorId = 1;
  repeated google.protobuf.Timestamp Timestamps = 2;
}

message SaveReadingsFromCsvChunk {
  bytes Chunk = 1;
  google.protobuf.BoolValue AllowOverwrite = 16;
  google.protobuf.Int32Value DeviceId = 17;
  google.protobuf.StringValue SensorName = 18;

}

message GetFirstRecentFromSensorRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
}

message GetAllFromSensorRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
  int32 PageSize = 3;
  int32 PageNumber = 4;
}

message GetManyFromSensorResponse {
  int32 SensorId = 1;
  int32 SensorTypeId = 2;
  common.PaginationMetaData PaginationMetaData = 3;
  repeated ReadingNoSensorDto Readings = 4;
}

enum TimeUnit {
  SECOND = 0;
  MINUTE = 1;
  HOUR = 2;
  DAY = 3;
}

message GetLastFromSensorRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
  int32 PageSize = 3;
  int32 PageNumber = 4;
  TimeUnit TimeUnit = 5;
  int32 TimeUnitValue = 6;
}

message GetRangeFromSensorRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
  int32 PageSize = 3;
  int32 PageNumber = 4;
  google.protobuf.Timestamp StartDate = 5;
  google.protobuf.Timestamp EndDate = 6;
}

message MetricDto {
  google.protobuf.Timestamp TimeBucket = 1;
  int32 SensorId = 2;
  double Max = 3;
  double Min = 4;
  double Average = 5;
  double Sum = 6;
  double StdDev = 7;
  double Variance = 8;
  int32 NumberOfValues = 9;
}

message GetMetricsByRangeRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
  int32 PageSize = 3;
  int32 PageNumber = 4;
  google.protobuf.Timestamp StartDate = 5;
  google.protobuf.Timestamp EndDate = 6;
}

message GetMetricsByRangeResponse {
  int32 SensorId = 1;
  int32 SensorTypeId = 2;
  common.PaginationMetaData PaginationMetaData = 3;
  repeated MetricDto Metrics = 4;
}


enum FileType {
  CSV = 0;
  EXCEL = 1;
}

message  GetRangeFromSensorAsFileRequest {
  oneof Sensor {
    DeviceAndSensorName DeviceAndName = 1;
    int32 SensorId = 2;
  }
  google.protobuf.Timestamp StartDate = 3;
  google.protobuf.Timestamp EndDate = 4;

  FileType FileType = 5;
}

message GetRangeFromSensorFileChunk {
  bytes FileContent = 1;
  FileType FileType = 2;
  int32 ChunkNumber = 3;
}
